package codegen

import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.TypeSpec
import lexicon.*
import java.nio.file.Path
import java.util.*
import kotlin.io.path.Path

fun SchemaDef.codegen(name: String): List<TypeSpec> {
    return when (this) {
        is LexiconObject -> listOf(this.codegen(name)) // TODO need a `defs` type to wrap multiple objects and avoid listOf?
        is LexiconProcedure -> this.codegen(name)
        is LexiconQuery -> this.codegen(name)
        // TODO record, subscription...
        else -> emptyList()
    }
}

fun LexiconDoc.codegen(destination: Path) {
    var description: String? = null
    val rootName = this.id.split(".").last().capitalize()
    val specs = mutableListOf<TypeSpec>()

    this.defs.forEach { (name, def) ->
        specs += def.codegen(
            if (name == "main") rootName
            else if (rootName == "Defs") name.capitalize()
            else "$rootName${name.capitalize()}"
        )
        if (name == "main") description = def.description
    }

    if (specs.isNotEmpty()) {
        val file = FileSpec.builder(this.namespace ?: "", rootName)
            .addFileComment("""
This file was generated by Panorama. DO NOT EDIT.

Lexicon: ${this.id}
${description?.let { "Description: $it" }}
                        """.trimIndent())
        specs.forEach { file.addType(it) }
        file.build().writeTo(destination)
    }
}