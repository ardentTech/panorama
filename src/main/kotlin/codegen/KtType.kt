package codegen

import codegen.converters.capitalize
import com.squareup.kotlinpoet.FileSpec
import lexicon.LexiconDoc
import kotlin.reflect.KClass

// these bridge the gap between the KotlinPoet and Lexicon types
sealed interface KtType {
    val name: String

    data class KtDataClass(
        val description: String? = null,
        override val name: String,
        val parameters: List<KtParameter<*>>,
        val properties: List<KtProperty<*>> = emptyList()
    ): KtType

    data class KtDataObject(
        val description: String? = null,
        override val name: String,
        val properties: List<KtProperty<*>>
    ): KtType

    data class KtEnum(
        val constants: List<String>,
        val description: String? = null,
        override val name: String
    ): KtType

    data class KtFile(
        val contents: List<KtType>,
        val description: String,
        val packageName: String,
        override val name: String
    ): KtType {
        init {
            require(contents.isNotEmpty())
        }
    }

    data class KtParameter<T: Any>(
        val cls: KClass<T>,
        val default: T? = null,
        val isNullable: Boolean = false,
        override val name: String
    ): KtType

    data class KtProperty<T: Any>(
        val cls: KClass<T>,
        override val name: String,
        val value: T? = null
    ): KtType

    data class KtValueClass<T: Any>(
        val cls: KClass<T>,
        override val name: String
    ): KtType
}

// TODO parse specs
fun LexiconDoc.toKtFile() = KtType.KtFile(
    emptyList(),
    """
        |This file was generated by Panorama. DO NOT EDIT.
        |
        |Lexicon: ${this.id}
        |Version: ${this.lexicon}
        |Revision: ${this.revision ?: "N/A"}
        |Description: ${description ?: "N/A"}
        |
    """.trimMargin(),
    this.namespace ?: "",
    this.name.capitalize()
)

fun KtType.KtFile.codegen(): FileSpec {
    // TODO convert each item in contents to TypeSpec
    return FileSpec.builder(packageName, name)
        .addFileComment(description)
        //.addTypes(contents)
        .build()
}