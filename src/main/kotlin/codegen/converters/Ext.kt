package codegen.converters

import codegen.SourceCode
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.TypeSpec
import lexicon.LexiconDoc
import java.util.*

internal fun LexiconDoc.convertToFile(): FileSpec {
    return SourceCode.generateFile(
        """
        |This file was generated by Panorama. DO NOT EDIT.
        |
        |Lexicon: ${this.id}
        |Version: ${this.lexicon}
        |Revision: ${this.revision ?: "N/A"}
        |Description: ${this.description ?: "N/A"}
        |
    """.trimMargin(),
        listOf(
            TypeSpec.classBuilder("TODO").build()
        ),
        this.namespace ?: "",
        this.name.capitalize()
    )
}

// TODO unit test
fun String.capitalize(): String {
    return this.replaceFirstChar {
        if (it.isLowerCase()) it.uppercase(Locale.getDefault()) else it.toString()
    }
}

// TODO unit test
fun String.camelToEnumCase(): String {
    val pattern = "(?<=.)[A-Z]".toRegex()
    return this.replace(pattern, "_$0").uppercase(Locale.getDefault())
}

// TODO unit test
fun String.uncapitalize(): String {
    return this.replaceFirstChar {
        if (it.isUpperCase()) it.lowercase(Locale.getDefault()) else it.toString()
    }
}