package codegen.converters

import codegen.SourceCode
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.TypeSpec
import lexicon.LexiconDoc
import lexicon.SchemaDef
import java.util.*

internal fun LexiconDoc.convertToFile(): FileSpec {
    var description: String? = null

    val specs = mutableListOf<TypeSpec>()
    this.defs.forEach { (key, def) ->
        val name = if (key == "main") this.name.capitalize()
            else if (this.name == "defs") key.capitalize()
            else "${this.name}${key.capitalize()}"
        specs += when (def) {
            is SchemaDef.Primary -> Primary.toDataClasses(def, name)
            else -> throw IllegalArgumentException("Unsupported type: $def")
        }
        if (key == "main") description = def.description
    }

    return SourceCode.generateFile(
        """
        |This file was generated by Panorama. DO NOT EDIT.
        |
        |Lexicon: ${this.id}
        |Version: ${this.lexicon}
        |Revision: ${this.revision ?: "N/A"}
        |Description: ${description ?: "N/A"}
        |
    """.trimMargin(),
        specs,
        this.namespace ?: "",
        this.name.capitalize()
    )
}

fun String.capitalize(): String {
    return this.replaceFirstChar {
        if (it.isLowerCase()) it.uppercase(Locale.getDefault()) else it.toString()
    }
}

fun String.camelToEnumCase(): String {
    val pattern = "(?<=.)[A-Z]".toRegex()
    return this.replace(pattern, "_$0").uppercase(Locale.getDefault())
}

fun String.uncapitalize(): String {
    return this.replaceFirstChar {
        if (it.isUpperCase()) it.lowercase(Locale.getDefault()) else it.toString()
    }
}